// Generated by CoffeeScript 2.0.1
(function() {
  var Buffer, Geometry, defaultToGeoJSON, library, newLibrary, postgis, wrapConfiguredLibrary;

  library = require('pg-promise');

  postgis = require('pg-postgis-types').default;

  ({Buffer} = require('buffer'));

  ({Geometry} = require('wkx'));

  defaultToGeoJSON = function(parser) {
    return function(...args) {
      var res, v;
      res = parser.apply(this, args);
      v = res.toGeoJSON();
      delete res.toGeoJSON;
      v.source = function() {
        return res;
      };
      return v;
    };
  };

  wrapConfiguredLibrary = function(pgp, useGeoJSON) {
    var newPGP;
    newPGP = function() {
      var Promise, dbObj, dbid, fetcher, k, p, v;
      dbObj = pgp.apply(this, arguments);
      // Start setting up parsers
      Promise = dbObj.$config.promise;
      fetcher = function(sql, cb) {
        return dbObj.query(sql).then(function(rows) {
          return cb(null, rows);
        });
      };
      dbid = "db";
      p = new Promise(function(resolve, reject) {
        return postgis(fetcher, dbid, function(err) {
          var getTypeParser, i, len, oid, oidmap, parser, ref, setTypeParser;
          if (err != null) {
            reject();
          }
          if (useGeoJSON) {
            //# Modify the type parser to return geoJSON object by
            //# default, with a raw object attached as geom.source()
            ({getTypeParser, setTypeParser} = pgp.pg.types);
            // This is a hack to get the internal OIDs and relies on an
            // implementation detail in the `pg-postgis-types` library.
            oidmap = postgis.oids[`postgis-${dbid}`];
            ref = Object.values(oidmap);
            for (i = 0, len = ref.length; i < len; i++) {
              oid = ref[i];
              parser = getTypeParser(oid);
              setTypeParser(oid, defaultToGeoJSON(parser));
            }
          }
          return resolve();
        });
      });
      // Make sure all functions on DB object
      // are applied within promises.
      for (k in dbObj) {
        v = dbObj[k];
        dbObj[k] = function(...args) {
          return p.then(function() {
            return v.apply(this, args);
          });
        };
      }
      return dbObj;
    };
    return Object.assign(newPGP, pgp);
  };

  newLibrary = function(opts = {}) {
    var pgp, useGeoJSON;
    useGeoJSON = opts.geoJSON || true;
    delete opts.geoJSON;
    pgp = library(opts);
    return wrapConfiguredLibrary(pgp, useGeoJSON);
  };

  module.exports = newLibrary;

}).call(this);
